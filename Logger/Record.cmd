@echo off
goto Main

:Help:
  echo ::----------------------------------------------------------------------------->&2
  echo ::-->&2
  echo ::--  Module:	%~f0>&2
  echo ::--  Version:	1.0>&2
  echo ::--  Author:	Richard Moyse>&2	
  echo ::-->&2
  echo ::--  Purpose:>&2
  echo ::--	Record messages generated by automated process to a log file in order>&2
  echo ::--	to assist debugging when a process abnormally terminates and to>&2
  echo ::--	monitor automated processes to ensure their execution.>&2
  echo ::-->&2
  echo ::--  Assumes:>&2
  echo ::--    1.  User account running this script has authority to write to the specified LOG_FILE.
  echo ::-->&2
  echo ::--  Input:>&2
  echo ::--	1.  %1: The configuration file name or /? to display this help. >&2
  echo ::--	2.  %2: Transaction Identifier, uniquely identifies a conceptual atomic transaction
  echo ::--	3.  %3: The type of error being reported.>&2
  echo ::--	4.  %4: The name of the automated process that generated the message.>&2
  echo ::--	5.  %5: The message body.>&2
  echo ::-->&2
  echo ::--  Output:>&2
  echo ::--	1.  The provided message is enhanced with additional information>&2
  echo ::--	    and written to the specified LOG_FILE.>&2
  echo ::--	2.  errorlevel:>&2
  echo ::--		0: Successfully written to LOG_FILE.>&2
  echo ::--		1: Problem writing to LOG_FILE.>&2
  echo ::-->&2
  echo ::----------------------------------------------------------------------------->&2
  echo ::>&2
  echo ::>&2
  echo ::----------------------------------------------------------------------------->&2
  echo ::-- Configuration file settings needed by the %~f0 script.>&2
  echo ::-- The configuration setting routing is called from the same command processor as the %~f0 script>&2
  echo ::-- Therefore, you can use other environment variables within this command process,>&2
  echo ::-- like the user specific %%TEMP%% variable, and it will refer to the same one visible to the >&2
  echo ::-- script.>&2
  echo ::-->&2
  echo ::-- Do not code a startlocal or endlocal within this script, at least at this top most level,>&2
  echo ::-- as it will erase the values set by the script.>&2
  echo ::----------------------------------------------------------------------------->&2
  echo ::>&2
  echo ::-- The absolute path, without double quotes, to the Argument methods.>&2
  echo set BIND_ARGUMENT=^<ArgumentCheckAbsoluteFilePath^>>&2
  echo ::>&2
  echo ::-- The absolute path, enclosed in double quotes, to a file designated>&2
  echo ::-- as a log.>&2
  echo set LOG_FILE="<LogFileAbsoluteFilePath>">&2
  echo exit /b 0 >&2

exit /b 0


:Main:
  setlocal

  if "%~1"=="/?"     call :Help & exit /b 0
  if not exist "%~1" call :Abort "Unable to locate provided configuration file: '%~1'.  Example follows:" & call :Help & exit /b 1
  
  call "%~1"
  if errorlevel 1 call :Abort "Poblem detected while processing paramters from configuration file '%~1'" & exit /b 1

  call "%BIND_ARGUMENT%\Check" ARGUMENT_CHECK_EMPTY LOG_FILE 
  if errorlevel 1 (
     call :Abort "Following configuration variables must be defined:'%ARGUMENT_CHECK_EMPTY%'"
     call :Abort "Please correct errors in configuration file '%~1'"
     exit /b 1
  )
  echo /k "%~2" /c "%COMPUTERNAME%" /u "%USERNAME%" /d "%Date:~4%:%TIME%" /t "%~3" /p "%~4" /m "%~5">>%LOG_FILE%	
exit /b 0


:Abort:
  echo /t "Abort" /p "%~f0" /m "%~1%~2%~3%~4%~5%~6%~7%~8%~9" >&2
  endlocal
exit /b 1
